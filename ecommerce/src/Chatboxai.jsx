import { useState, useEffect, useRef } from "react";
import styles from "../src/Chatboxai.module.css";
import imgchatbox from "../src/assets/images/chatai.png";

export default function Chatboxai() {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  
  const sendMessage = async () => {
    if (!input.trim()) return;
    const newMessages = [...messages, { from: "user", text: input }];
    setMessages(newMessages);
    setInput("");
    setIsLoading(true); // B·∫Øt ƒë·∫ßu loading
    
    try {
      const payload = {
        message: input,
      };
      const response = await fetch("https://localhost:7048/api/ChatBot/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("L·ªói server:", errorText);
        throw new Error(`L·ªói: ${response.status}`);
      }
      const data = await response.json();
      setMessages((prev) => [...prev, { from: "ai", text: data.answer }]);
    } catch (err) {
      console.error("L·ªói g·ª≠i tin nh·∫Øn:", err.message);
      setMessages((prev) => [
        ...prev,
        { from: "ai", text: "Kh√¥ng th·ªÉ k·∫øt n·ªëi API ho·∫∑c l·ªói t·ª´ server." },
      ]);
    } finally {
      setIsLoading(false); // K·∫øt th√∫c loading
    }
  };

  // X·ª≠ l√Ω ph√≠m Enter ƒë·ªÉ g·ª≠i tin nh·∫Øn
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // T·ª± ƒë·ªông scroll xu·ªëng cu·ªëi khi messages thay ƒë·ªïi
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  return (
    <>
      <div className={styles.iconAI}>
        <button onClick={() => setOpen(!open)}>
          <img src={imgchatbox} alt="chatbox" />
        </button>
      </div>

      {open && (
        <div className={styles["chat-popup"]}>
          <div className={styles.header}>
            <h3>Tr·ª£ l√Ω AI</h3>
            <button className={styles.closeButton} onClick={() => setOpen(false)}>√ó</button>
          </div>
          
          <div className={styles.messages}>
            {/* L·ªùi ch√†o khi kh√¥ng c√≥ tin nh·∫Øn */}
            {messages.length === 0 && (
              <div className={styles.welcomeMessage}>
                <h4>üëã Xin ch√†o!</h4>
                <p>T√¥i l√† tr·ª£ l√Ω AI c·ªßa FIRGUE SHOP. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:</p>
                <ul>
                  <li>T√¨m ki·∫øm s·∫£n ph·∫©m</li>
                  <li>Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ ƒë∆°n h√†ng</li>
                  <li>H∆∞·ªõng d·∫´n c√°ch thanh to√°n</li>
                  <li>T∆∞ v·∫•n ch·ªçn mua s·∫£n ph·∫©m ph√π h·ª£p</li>
                </ul>
                <p>H√£y ƒë·∫∑t c√¢u h·ªèi cho t√¥i!</p>
              </div>
            )}
            
            {messages.map((msg, index) => (
              <div
                key={index}
                className={`${styles.messageItem} ${
                  msg.from === "user" ? styles.userMessage : styles.aiMessage
                }`}
              >
                <div className={styles.messageContent}>
                  {msg.text}
                </div>
              </div>
            ))}
            
            {/* Hi·ªÉn th·ªã loading khi ƒëang ch·ªù ph·∫£n h·ªìi */}
            {isLoading && (
              <div className={`${styles.messageItem} ${styles.aiMessage}`}>
                <div className={`${styles.messageContent} ${styles.loadingMessage}`}>
                  <span className={styles.dot}></span>
                  <span className={styles.dot}></span>
                  <span className={styles.dot}></span>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
          
          <div className={styles.inputArea}>
            <textarea
              placeholder="Nh·∫≠p c√¢u h·ªèi..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              disabled={isLoading}
            />
            <button 
              onClick={sendMessage}
              disabled={isLoading || !input.trim()}
            >
              {isLoading ? 'ƒêang g·ª≠i...' : 'G·ª≠i'}
            </button>
          </div>
        </div>
      )}
    </>
  );
}
